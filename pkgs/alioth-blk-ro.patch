From 553d05d8364e2bbba807279b4d30949d0764b444 Mon Sep 17 00:00:00 2001
From: Astro <astro@spaceboyz.net>
Date: Tue, 9 Jul 2024 12:44:17 +0200
Subject: [PATCH] feat(blk): allow configuring readonly block devices

---
 alioth-cli/src/main.rs       |  2 +-
 alioth/src/virtio/dev/blk.rs | 11 +++++++++--
 2 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/alioth-cli/src/main.rs b/alioth-cli/src/main.rs
index 74aa578..3858afb 100644
--- a/alioth-cli/src/main.rs
+++ b/alioth-cli/src/main.rs
@@ -253,7 +253,7 @@ fn main_run(args: RunArgs) -> Result<(), Error> {
             .context(error::CreateDevice)?;
     }
     for (index, blk) in args.blk.into_iter().enumerate() {
-        let param = BlockParam { path: blk.into() };
+        let param: BlockParam = serde_aco::from_arg(&blk).context(error::ParseArg { arg: blk })?;
         vm.add_virtio_dev(format!("virtio-blk-{index}"), param)
             .context(error::CreateDevice)?;
     }
diff --git a/alioth/src/virtio/dev/blk.rs b/alioth/src/virtio/dev/blk.rs
index 29fc6ce..3127e24 100644
--- a/alioth/src/virtio/dev/blk.rs
+++ b/alioth/src/virtio/dev/blk.rs
@@ -21,6 +21,7 @@ use std::sync::Arc;
 use bitflags::bitflags;
 use mio::event::Event;
 use mio::Registry;
+use serde::Deserialize;
 use zerocopy::{AsBytes, FromBytes, FromZeroes};
 
 use crate::mem::mapped::RamBus;
@@ -122,8 +123,10 @@ pub struct BlockConfig {
 }
 impl_mmio_for_zerocopy!(BlockConfig);
 
+#[derive(Debug, Clone, Deserialize)]
 pub struct BlockParam {
     pub path: PathBuf,
+    pub readonly: bool,
 }
 
 impl DevParam for BlockParam {
@@ -144,7 +147,7 @@ pub struct Block {
 
 impl Block {
     pub fn new(param: BlockParam, name: Arc<String>) -> Result<Self> {
-        let disk = OpenOptions::new().read(true).write(true).open(param.path)?;
+        let disk = OpenOptions::new().read(true).write(!param.readonly).open(param.path)?;
         let len = disk.metadata()?.len();
         let config = BlockConfig {
             capacity: len / SECTOR_SIZE as u64,
@@ -152,11 +155,15 @@ impl Block {
             ..Default::default()
         };
         let config = Arc::new(config);
+        let mut feature = BlockFeature::FLUSH;
+        if param.readonly {
+            feature |= BlockFeature::RO;
+        }
         Ok(Block {
             name,
             disk,
             config,
-            feature: BlockFeature::FLUSH,
+            feature,
         })
     }
 
-- 
2.44.1

